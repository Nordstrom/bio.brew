h1. Bio Brew

Simple package manager for bioinformatic tools.
Fork of "drio's biobrew":https://github.com/drio/bio.brew with some slight architecture changes.

h2. Differences from Original bio.brew

* The recipe seed name is a more fundamental part of the system architecture now. Recipes are defined by the combination of the recipe name as well as the seed name. In effect, the *recipe name* describes a *tool* and the *seed name* indicates a specific *version* of that tool.
* The above architecture allows and encourages keeping multiple versions (seeds) of a tool around but having only one version *active* at a particular time. 
* The STAGE_DIR is where the compiled resources for a recipe/seed live. This is separate and external to the installation directory.
* The installation directory is configurable by defining @BB_INSTALL@ (see configuration below).
** To be an active seed is to have the binaries of the particular seed of the recipe linked in the bin directory of bio.brew
** This is achieved partly through the use of a *current* symbolic link for each recipe that points to the directory containing the active seed.
* Installation of a recipe seed and activation of that seed are two separate steps in this version of bio.brew.
** This allows some sort of testing to be performed before the current version (seed) of the tool is switched to the new version.
* Required operations before/after installation and removal are called automatically, instead of having to call these functions inside individual recipes.
* Some additional helper functions for installation and checking external dependencies.
* Additional bio.brew commands:
** *clean* - to remove bio.brew files related to a recipe/seed. Useful for initially developing a recipe to clean out failed installation attempts.
** *activate* - as mentioned above, activation (moving the current pointer for a recipe to the newly installed seed) is a separate step from install.
** *test* - stubbed functionality that could be used in the future to add testing for a recipe/seed before it is activated.
** *fake* - If there is a dependency in a recipe, but you don't want to use bio.brew to install the dependency, use fake to have bio.brew think that it is installed. (Most useful for java dependencies).

h2. Introduction

Imagine you get access to a new linux box or HPC cluster. You want to start doing your analysis, coding, data-mining but you do not have your toolbox available. Yes, you can ask the sysadmins to install that for you. That may work. You may also install the tools yourself.

BB (biobrew) helps you either way. With a simple oneliner you can have most of your tools ready to use.  BB is a tiny package manager based entirely in bash. It makes the extension of recipes (package definitions) very easy. 

BB currently works in Linux enviroments (it should work just fine in other flavours of Unix). It only needs a typical Linux enviroment with gcc and curl. Besides my classic and inseparable unix tools bb comes with some bioinformatics gems.  

Give it a try and make it better by improving the framework and adding more recipes.

h2. Install

There are a few ways to install and configure bio.brew. My (current) preferred method involves checking out the source from github using git and then using the minimum configuration setup as detailed below. The requirement for this method is of course that you need git installed on your system.

h3. Install with git

git clone git://github.com/vlandham/bio.brew.git

h3. Install without git

Another potential option is to use curl:

<pre>
$ # Download the master branch using curl
$ # -L follow redirects; -s silent; -S show error message if fails; -f fail silently on server errors
$ curl -LsSf http://github.com/drio/bio.brew/tarball/master | tar xvz -C. --strip 1
</pre>

h2. Configuration

h3. Minimum Configuration

At a minimum, you should define the @BB_PATH@ and @BB_INSTALL@ environmental variables and add @$BB_INSTALL/bin@ and @$BB_PATH/bin@ to your @PATH@. 

This will add the bb executable to your path as well as binaries created using bio.brew. Just adding these variables will *not* add the recipe specific ENV variables to your path (see below).

Here is an example setup for basic bio.brew Brew use:

<pre>
export BB_INSTALL=/home/username/tools
export BB_PATH=/home/username/tools/bio.brew
PATH="$BB_INSTALL/bin:$BB_PATH/bin:$PATH"
</pre>

h3. load_env Helper Script

The small script load_env has been provided to give one option for configuring bio.brew. You can add ./load_env to your shell's configuration file. For bash, this would look like: 

<pre>
source /data/rogers/drio_scratch/bb/load_env    
</pre>

That will set the proper path(s). Take a quick peek to load_env, it is a very small script.


Once installed the binaries will be in your path so you can just call them. Keep in mind some recipes (packages) do not generate binary files, for those cases, bb creates special scripts (log/*.sh) and the necessary ENV vars are created. For example, picard is a bunch of jars that cannot be executed directly. By loading the recipe's enviroment you will have a ENV variable called PICARD that points to the jars. It is then very easy to 
use the jars as necessary.

h2. Testing

At that point you can use ./bin/bb to list, install or remove recipes. You can also run the ``tests/do_all.sh`` script to install all the recipes. That may take some time (20 minutes in a fairly powerful machine with 8 cores and using bb -j8 install).

h2. Using bio.brew

h3. Installing a new recipe

Here we use bio.brew to install samtools. The -j8 is passed to make when compiling

<pre>
bb list
# produces a list of possible recipes to install with 
# the versions of the applications that each recipe is 
# made for (the seed of the recipe).
bb install samtools
# output produced by download and install of samtools
# if there is an errror, look at log files in $BB_PATH/log/samtools
bb activate samtools
# this will create sym links of the newly created binaries 
# from the samtools staging directory to $BB_INSTALL/bin
# Having this as a separate step allows you to download an update
# and test it without it replacing your current version of a tool.
</pre>

As you can see, it is now installed in bio.brew's local directory

<pre>
$ ls -acl $BB_INSTALL/bin 
</pre>

h2. TODO

+ Allow specific options for actions (-j should not be generic, only for install).
+ Extend readme to should how to deal with jars.
